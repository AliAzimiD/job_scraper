version: '3.9'

services:
  scraper:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: job_scraper_dev
    dns:
      - 1.1.1.1
      - 8.8.4.4
    volumes:
      - .:/app
      - job_data:/app/job_data
    environment:
      - SCRAPER_ENV=development
      - TZ=Asia/Tehran
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=jobsdb
      - POSTGRES_USER=jobuser
      - POSTGRES_PASSWORD=devpassword
      - ENABLE_CRON=false
      - RUN_ON_START=false
      - LOG_LEVEL=DEBUG
      - ENABLE_HEALTH_CHECK=true
      - HEALTH_PORT=8081
      - MAX_CONCURRENT_REQUESTS=5
      - QUEUE_SIZE=1000
    ports:
      - "8081:8081"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - scraper-network
    command: >
      /bin/bash -c "
        python -m pip install -e .
        python -m pytest -xvs tests/ || echo 'Tests failed but continuing...'
        tail -f /dev/null
      "
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  web:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: job_web_dev
    dns:
      - 1.1.1.1
      - 8.8.4.4
    volumes:
      - .:/app
      - job_data:/app/job_data
      - ./backups:/app/backups
      - ./uploads:/app/uploads
    environment:
      - FLASK_APP=src.web_app:create_app()
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - FLASK_SECRET_KEY=dev-secret-key-change-in-production
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=jobsdb
      - POSTGRES_USER=jobuser
      - POSTGRES_PASSWORD=devpassword
      - LOG_LEVEL=DEBUG
      - CONFIG_PATH=config/api_config.yaml
      - WEB_HOST=0.0.0.0
      - WEB_PORT=5000
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - scraper-network
    command: >
      /bin/bash -c "
        python -m pip install -e .
        python -m pip install flask-bootstrap
        python -m flask run --host=0.0.0.0 --port=5000 || tail -f /dev/null
      "
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000/dashboard" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:15-alpine
    container_name: job_db_dev
    dns:
      - 1.1.1.1
      - 8.8.4.4
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_DB=jobsdb
      - POSTGRES_USER=jobuser
      - POSTGRES_PASSWORD=devpassword
    ports:
      - "5432:5432"
    networks:
      - scraper-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U jobuser -d jobsdb" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    container_name: job_pgadmin_dev
    dns:
      - 1.1.1.1
      - 8.8.4.4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=devpassword
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "5050:80"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - scraper-network
    restart: unless-stopped

volumes:
  postgres_data_dev:
    name: job_postgres_data_dev
  job_data:
    name: job_data_dev

networks:
  scraper-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
